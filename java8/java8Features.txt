java 8 feature -> 2014
latest 18 version 


python, R, scala 
10 lines of code ->
100 lines of java -> 

Less number of code -> Functional programming


 					 
1. lambda expression
2. functional interface
3. default/static methods
4. predefined  functional interfaces
     predicate
     consumer
     supplier
     function
5.Double colon operator (::)
     for method reference purpose
     for constructor reference. 
6. streams, parallel streams
7. optional classes ( to avoid null pointer exce)
8. date time api ( util.date or sql.date)


1. lambda expression
  LISP -> used lambda 
  lambda -> python, c , c++ 
   not specific to java, came lately 
   -> lambda expression
   objective: to bring benefits of functional programming into javaa
   ->
   anonymous function
 -> no name/ nameless
 -> without r type, without modifier, without name -> 
 
 
 public void printSomething(){
 System.out.println("Hello");
 }


no return type, no modifier, no method name 


reduction in lambda expression:

  ()-> {System.out.println("Hello");}

 ()-> System.out.println("Hello");

-----------------example 1 ----------------
public void square(int a){
System.out.println(a*a);
}

reduction in lambda expression:

  ()-> {System.out.println("Hello");}

 ()-> System.out.println("Hello");
---------------example 2 ------------------
public void square(int a){
System.out.println(a*a);
}

 (int a) -> {System.out.println(a*a);}
(int a) -> System.out.println(a*a);
(a) -> System.out.println(a*a);
------------------------------

EG: 2

 public void m1(int a, int b){
 sysout(a+b);
 }
   ( a, b) -> sysout(a+b); //solution
 
 
 EG 3:
 public int squareIt(int n){
 return n*n;
 }

    (n) ->  n*n;
 
 EG: 4
 public int  m1(String s){
 return s.length()
 }
 
    ( s) -> { s.length() };
 EG: 5
 public void printName(String name){
System.out.println(name);
}
(name)-> name;






basics about abstract class
-> can have both abstract and non abstract methods

interface:
-> all methods are abstract methods 

--------------------------------------------
FUNCTIONAL INTERFACES:

-> contains sam(Single abstract method )
1.Functional Interface is a interface which contains only one abstract method
2.Can contain default and static methods
3. @Functional Interface annotation is optional.
4. Lambda Expression used to represent instance of functional interface


public interface Mobile{
public void m1();
}

@FunctionalInterface  ->optional 
------------------below invalid-----------
@FunctionalInterface {
public void m1(); 
public void m2();
}  

------------below invalid--------------
@FunctionalInterface {
 interface Interface { 
}
---------below valid ------


    
@FunctionalInterface
interface A {
public void methodOne();
}
@FunctionalInterface
Interface B extends A {}
---------below valid -------

@FunctionalInterface
interface A {
 public void methodOne();
 }

 @FunctionalInterface
 interface B extends A {
 public void methodOne();
 } 
---------------below invalid --------

@FunctionalInterface {
 interface A {
 public void methodOne();
 }


 @FunctionalInterface
 interface B extends A {
 public void methodTwo();
 }

------
if u want to invoke lambda expression, then compulsory we need FI

In java8, interfaces can have default and static methods :) 
Functional interface -> single abstract method , 
                        can have default and static methods 
static method -> can't be overriden 
        Interface static methods by-default not available to the implementation classes hence by using 
implementation class reference we can’t call interface static
      As interface static methods by default not available to the implementation class,overriding concept is 
not applicable.Based on our requirement we can define exactly same method in the implementation class,it’s valid 
but not overriding
